load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")

package(default_visibility = ["//visibility:public"])

cc_library(
    name = "common",
    deps = [
        ":defer",
        ":define",
        ":disablecopy",
        ":pimpl",
        ":random",
        ":string_util",
        ":time_util",
    ],
)

cc_library(
    name = "define",
    hdrs = [
        "define.h",
    ],
)

cc_library(
    name = "string_util",
    srcs = [
        "string_util.cpp",
    ],
    hdrs = [
        "string_util.hpp",
    ],
    copts = [],
    visibility = ["//visibility:public"],
    deps = [
        "@abseil//absl/strings",
    ],
)

cc_test(
    name = "string_util_test",
    srcs = [
        "string_util_test.cpp",
    ],
    copts = [],
    deps = [
        ":string_util",
        "//external:gtest_main",
    ],
)

cc_library(
    name = "time_util",
    hdrs = ["time_util.hpp"],
    visibility = ["//visibility:public"],
)

cc_test(
    name = "time_util_test",
    srcs = ["time_util_test.cpp"],
    deps = [
        ":time_util",
        "//external:gtest_main",
    ],
)

cc_library(
    name = "disablecopy",
    hdrs = ["disablecopy.h"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "callstack",
    srcs = ["callstack.cpp"],
    hdrs = ["callstack.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@abseil//absl/debugging:stacktrace",
        "@abseil//absl/debugging:symbolize",
    ],
)

cc_test(
    name = "callstack_test",
    srcs = ["callstack_test.cpp"],
    deps = [
        ":callstack",
        "//external:gtest_main",
    ],
)

cc_binary(
    name = "callstack_test2",
    srcs = ["callstack_test2.cpp"],
    deps = [":callstack"],
)

cc_library(
    name = "pimpl",
    hdrs = ["pimpl.h"],
)

cc_library(
    name = "bloom_filter",
    srcs = ["bloom_filter.cpp"],
    hdrs = ["bloom_filter.h"],
    deps = [
        ":common",
        "//base/file:mmap",
        "@abseil//absl/hash:city",
    ],
)

cc_test(
    name = "bloom_filter_test",
    srcs = ["bloom_filter_test.cpp"],
    deps = [
        ":bloom_filter",
        "//external:gtest_main",
    ],
)

cc_library(
    name = "random",
    srcs = [
        "random.cpp",
    ],
    hdrs = [
        "random.h",
    ],
)

cc_test(
    name = "random_test",
    srcs = ["random_test.cpp"],
    deps = [
        ":random",
        "//external:gtest_main",
    ],
)

cc_library(
    name = "defer",
    hdrs = ["defer.h"],
    deps = [
        ":define",
        ":disablecopy",
    ],
)

cc_test(
    name = "defer_test",
    srcs = ["defer_test.cpp"],
    deps = [
        ":defer",
        "//external:gtest_main",
    ],
)
